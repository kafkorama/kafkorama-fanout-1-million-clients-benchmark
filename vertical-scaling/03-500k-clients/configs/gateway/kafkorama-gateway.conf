
BenchmarkMode=true
X.ConnectionOffload=true

BufferLimit.Receive=1024
BufferLimit.Send=1024

Stats.PrettyPrint=true
Stats.LogInterval=5

#
# See Kafkorama Gateway Configuration Guide [ https://kafkorama.com/docs/gateway/config/core-parameters/ ]
# for a complete discussion concerning the semantics of each parameter below and how to configure each parameter.
#

# Trial license key used for development. This trial license key unlocks a fully functional version of the Kafkorama
# server, including all its integrations, up to 100 concurrent connections. For a production license key please contact
# Kafkorama at sales@kafkorama.com
LicenseKey = @@REPLACE_LICENSE_KEY@@

# The maximum memory for the JVM process in megabytes (MB suffix is required)
# In a production environment, it is recommended to configure at least 8192 MB
Memory = 24576 MB

# The folder used by the Kafkorama gateway to serve various documents such as
# html, javascript, and css files.
#
# NOTE: Kafkorama focuses exclusively on real-time data delivery. The
# functionality provided by this parameter - to serve static resources - is
# provided only for testing and development purposes. Therefore, in production,
# use your http server of choice to serve static resources.
#
# This parameter is optional. If not supplied, the folder 'html', relative to
# the folder from which the Kafkorama gateway has been started, is the
# default value.
DocumentRoot = html

# A list of addresses used to listen for client connections. The format of each
# address in the list is:
#    "IP_address:port" (e.g. 192.168.0.1:80) or
#    "DNS_name:port" (e.g. push.example.com:80).
# IPv6 addresses must be enclosed in square brackets. For example:
#    [2001:db8::a00:20ff:fea7:ccea]:80
# If you specify an address without a port, the default port 80 will be used.
# You can also use the wildcard address (*) to listen on all network interfaces
# of the machine (e.g. *:80)
Listen = *:8800,*:8801,*:8802,*:8803,*:8804,*:8805,*:8806,*:8807,*:8808,*:8809,*:8810,*:8811,*:8812,*:8813,*:8814,*:8815,*:8816,*:8817,*:8818,*:8819,*:8820,*:8821,*:8822,*:8823,*:8824,*:8825,*:8826,*:8827,*:8828,*:8829,*:8830,*:8831,*:8832,*:8833,*:8834,*:8835,*:8836,*:8837,*:8838,*:8839

# A list of addresses used to listen for encrypted client connections. The
# format of each address in the list is:
#    "IP_address:port" (e.g. 192.168.0.1:443) or
#    "DNS_name:port" (e.g. push.example.com:443).
# If you specify an address without a port, the default port 443 will be used.
# For each address in this list (e.g. push.example.com:443 or 192.168.1.1:443)
# you will need to add a SSL certificate in the keystore defined by the
# parameter KeyStore
#ListenEncrypted =

# A Java keystore file containing the SSL certificates of the addresses defined
# by the parameter ListenEncrypted.
#
# Kafkorama Gateway Configuration Guide provides detailed information on how to
# create a keystore and how to add certificate entries to it.
#KeyStore = /some/path/push.example.com.jks

# The password of the Java keystore file defined by the parameter KeyStore
#KeyStorePassword = keystore-password

# Monitoring type. The possible values are JMX, HTTP and PROMETHEUS. To enable all types of
# monitoring use a comma separated list as follows:
#    Monitor = JMX, HTTP, PROMETHEUS
Monitor = Prometheus

# Username for monitoring authentication
MonitorUsername = admin

# Password for monitoring authentication
MonitorPassword = pass

MonitorPrometheus.Listen=*:9988

# An address used to listen for JMX monitoring clients. The format of the
# address is:
#    "IP_address:port" (e.g. 192.168.0.1:3000) or
#    "DNS_name:port" (e.g. push.example.com:3000).
#MonitorJMX.Listen = 127.0.0.1:3000

# Decide whether to use TLS/SSL encryption when connecting to the JMX monitoring
# service. The use of an encrypted connection is especially recommended for the
# JMX remote monitoring from an insecure network, including Internet.
#MonitorJMX.Encryption = false

# Decide whether to use authentication when connecting to the JMX monitoring
# service. If set on true then, in order to access the monitoring via JMX, you
# will need to use the username configured with the parameter MonitorUsername
# and the password configured with the parameter MonitorPassword
#MonitorJMX.Authentication = true

# An address used to listen for HTTP monitoring clients. The format of the
# address is:
#    "IP_address:port" (e.g. 192.168.0.1:4000) or
#    "DNS_name:port" (e.g. push.example.com:4000).
#MonitorHTTP.Listen = 127.0.0.1:4000

# Decide whether to use TLS/SSL encryption when connecting to the HTTP
# monitoring service. The use of an encrypted connection is especially
# recommended for remote monitoring from an insecure network, including Internet
#MonitorHTTP.Encryption = false

# Decide whether to use authentication when connecting to the HTTP monitoring
# service. If set on true then, in order to access the monitoring via HTTP, you
# will need to use the username configured with the parameter MonitorUsername
# and the password configured with the parameter MonitorPassword
#MonitorHTTP.Authentication = true

# The folder where the logs will be written
LogFolder = logs

# LogLevel adjusts the verbosity of the recorded logs. The available logging
# levels ordered by verbosity are: TRACE (most verbose), DEBUG, INFO, WARN, and
# ERROR (less verbose)
LogLevel = INFO

# If the log file reaches the capacity provided by LogRotateLimit, then a new
# logging file will be created and the old one will be kept on disk
LogRotateLimit = 10 MB

# The clients are separated in groups to better scale on multiprocessor servers.
# This parameter configures the number of groups. This is optional, if not
# supplied the number of CPU cores available is the default value. In most
# situations it is not recommended to modify the default value.
Workgroups = 8

# The number of threads used for I/O processing. This is optional, if not
# supplied the number of CPU cores available is the default value. In most
# situations it is not recommended to modify the default value.
IoThreads = 16

# The maximum size of the batching in bytes. This is optional, if not supplied
# the messages will be published on one-by-one basis without batching. Read
# Kafkorama Gateway Architecture Guide to understand the notion of batching.
#MaxBatchingSpace = 0

# Entitlement type. The possible values are "None", "Basic" and "Custom":
#  - None:   Allow any user to subscribe and publish to any topic
#  - Basic:  Allows any user to subscribe to any topic, however, publication
#            is allowed only from the clients which authenticate with the
#            token defined by the parameter EntitlementAllowToken
#  - JWT:    Allows clients to subscribe and publish based on JWT tokens using the
#            MigratoryData JWT Authorization add-on. To start using JWT authorization
#            with MigratoryData, please read the JWT Authorization add-on documentation:
#            https://migratorydata.com/docs/addons/authorization-jwt/
#  - Custom: Allows to use your entitlement rules. MigratoryData provides
#            an authorization API library to easily build authorization rules
#            and load them into the Kafkorama Gateway as an extension
#            To learn how to build and load an entitlement plug-in, please
#            refer to Server Extensions API:
#            https://migratorydata.com/docs/server-extensions-api/
#  - Portal: Allows you to define your own entitlement using Kafkorama Portal. See also
#            the parameters Portal.Url and Portal.Password.
#            https://kafkorama.com/docs/portal/install/requirements/
#
# NOTE: If Kafkorama Gateway is deployed in headless mode, without Kafkorama Portal,
#       then any of the first four entitlement types (None, Basic, JWT, or Custom) can
#       be used. However, if Kafkorama Gateway is deployed with Kafkorama Portal, then
#       the Portal entitlement type must be used.
#
# This is optional, if not supplied, the default authorization type is "Portal"
Entitlement = Basic

# If the Entitlement is Basic, then only the clients using the token
# defined by this parameter are allowed to publish messages.
# If Entitlement is None, Custom, or JWT, then this parameter is ignored.
EntitlementAllowToken = some-token

# Configure the Kafkorama gateway to run as a non-root (regular) user.
# Supposing "kafkorama" is an existing regular user, then you can use:
#
#    RunAsUser = kafkorama
#
# Start the Kafkorama gateway as root (this is necessary to be able to
# bind on the privileged ports such as 80 or 443). Please note that while
# running as root, the Kafkorama gateway will not accept any client connection.
# Then, the Kafkorama gateway will drop the root privileges (using the
# system call setuid) and will automatically switch to the regular user
# "kafkorama". Only at this time, the Kafkorama gateway will start to
# accept client connections.
#
# NOTE: This parameter is available only for Linux.
#
#RunAsUser = kafkorama

# Enable one or more SSL ciphers in addition to the default JVM ciphers
#CipherListEnabled = TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA

# Exclude one or more SSL ciphers from the default JVM ciphers
#CipherListExcluded = TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA

