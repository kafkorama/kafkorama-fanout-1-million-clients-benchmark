BufferSize=1024

#
# This is the configuration file for MigratoryData Benchsub.
#
# MigratoryData Benchsub is a tool designed to simulate a configurable number
# of concurrent users, being able to:
#  - Connect a configurable number of users to a MigratoryData cluster
#  - Subscribe each user to a configurable number of subjects
#  - Receive the realtime messages for the subscribed subjects
#  - Compute the latency of the received messages
#
# Like a real user of an application built with any MigratoryData SDK, each
# simulated user of MigratoryData Benchsub is able to:
#  - Connect to a MigratoryData cluster over a persistent TCP connection
#  - Subscribe to a list of subjects
#  - Receive the realtime messages for the subscribed subjects
#
# See the Manual available in the "doc" folder for a complete description of
# the semantics of each parameter below and how to configure each parameter.

# Trial license key used for testing. This trial license key unlocks a fully functional version of the Migratorydata Benchsub
# with up to 100 concurrent connections. For a benchmark license key please contact Kafkorama at support@kafkorama.com
License = @@REPLACE_LICENSE_KEY@@

# The maximum memory for the JVM process expressed in megabytes. It is
# recommended to configure at least 16384 megabytes (i.e. 16 GB) or more
# depending on your number of concurrent users and message throughput.
Memory = 6144

# Specify the address of the i-th member of the MigratoryData cluster where
# to connect to. The format of each address is:
#    "ip_address:port" (e.g. 192.168.0.1:80) or
#    "dns_name:port" (e.g. push.example.com:80).
# If you specify an address without a port the default port 80 will be used.
ClusterAddress.1 = gateway2:881{0..9}

# If the benchmark tool connects to a MigratoryData server having the parameter
# Entitlement set on None or Basic, then don't configure this parameter (both
# None and Basic entitlement modes allow any user to subscribe to any subject.
# Otherwise, if the parameter Entitlement is set on Custom, then configure this
# parameter with the entitlement token that should match the custom entitlement
# rules that you defined with MigratoryData Authorization SDK.
#EntitlementToken = some-token

# The number of users to simulate.
NumUsers = 250000

# Specify the list of all common subjects.
#
# The list of common subjects should be specified as a pattern following the
# bash expansion syntax explained at:
#   http://www.gnu.org/software/bash/manual/bashref.html#Brace-Expansion
#
# For example, to subscribe to the following common subjects: /system/sbj1,
# /system/sbj2, and /system/sbj3, you can configure a pattern as follows:
#   CommonSubjects = /system/sbj\{1..3\}
#
# Another pattern example is /system/sbj-\{foo,bar,baz\}-tail which expands to
# the following subjects /system/sbj-foo-tail, /system/sbj-bar-tail, and
# /system/sbj-baz-tail.
CommonSubjects = /u/s{1..10000}

# Specify the number of common subjects to be subscribed by each user.
#
# For each user, Benchsub will select randomly from the list of all common
# subjects, as defined by the parameter CommonSubjects, a number of subjects
# as defined by this parameter.
NumCommonSubjectsPerUser = 1

# Specify the list of all unique subjects.
#
# The list of unique subjects should be specified as a pattern following the
# bash expansion syntax explained at:
#   http://www.gnu.org/software/bash/manual/bashref.html#Brace-Expansion
#
# For example, to subscribe to the following common subjects: /system/sbj1,
# /system/sbj2, and /system/sbj3, you can configure a pattern as follows:
#   CommonSubjects = /system/sbj\{1..3\}
#
# Another pattern example is /system/sbj-\{foo,bar,baz\}-tail which expands to
# the following subjects /system/sbj-foo-tail, /system/sbj-bar-tail, and
# /system/sbj-baz-tail.
#UniqueSubjects = /u/s{25/u/s{1..10}

# Specify the number of unique subjects to be subscribed by each user.
#
# For each user, Benchsub will select randomly from the list of all unique
# subjects, as defined by the parameter UniqueSubjects, a number of subjects
# as defined by this parameter and which are distinct, i.e. not subscribed by
# any other user.
#
# NOTE: Because each user will subscribe to a distinct subset of unique
# subjects, the number of users, as defined by the parameter NumUsers, must be
# equal to the number of unique subjects defined by the parameter UniqueSubjects
# multiplied by the number of unique subjects per user defined by this parameter.
#NumUniqueSubjectsPerUser = 1

# The time expressed in seconds used to stabilize the metrics. You can use this
# parameter to ignore the first WarmUpTime seconds of the test.
# If not configured it defaults to 0.
WarmUpTime = 300

# LogLevel adjusts the verbosity of the information recorded in the logs. The
# following levels are available, in order of increasing significance:
# TRACE (most verbose), DEBUG, INFO, WARN, ERROR (less verbose).
LogLevel = INFO

# The folder where the logs will be written.
LogFolder = logs

# The initial capacity of message buffers in bytes.
# You can use this parameter to optimize the memory usage. For example, suppose
# the size of your messages is somewhere between 50 bytes and 300 bytes, then
# you can optimize the memory usage by configuring the initial capacity of
# message buffers to say 512 bytes. Of course, if the size of some messages is
# handle those messages. If not configured, the value of this parameter is 8192.
#BufferSize = 512

# Record latency histograms and percentile distributions.
# If this parameter is set on true, Benchsub will record latency histograms and
# percentile distributions into the file hdrhistogram.log under the log folder.
#HdrHistogram = true